# Importieren der erforderlichen Module
import machine
import onewire
import ds18x20
import ssd1306
import time

# Definieren der Pins für den DS18B20 Temperatursensor, das Relais und das OLED-Display
sensor_pin = machine.Pin(15) # Der Datenpin des Sensors ist an Pin 15 angeschlossen
relay_pin = machine.Pin(14, machine.Pin.OUT) # Der Relaispin ist an Pin 14 angeschlossen und als Ausgang konfiguriert
i2c = machine.I2C(0, scl=machine.Pin(9), sda=machine.Pin(8)) # Die I2C-Pins für das OLED-Display sind SCL an Pin 9 und SDA an Pin 8
oled = ssd1306.SSD1306_I2C(128, 64, i2c) # Erstellen eines OLED-Objekts mit einer Auflösung von 128x64 Pixeln

# Erstellen eines OneWire-Bus-Objekts
ds = ds18x20.DS18X20(onewire.OneWire(sensor_pin))

# Scannen nach Sensoren auf dem Bus
sensors = ds.scan()
print('Gefundene Sensoren:', sensors)

# Definieren der gewünschten Temperaturbereiche für die drei Einstellungen
temp_ranges = {30: (28, 32), 40: (38, 42), 50: (48, 52)}

# Definieren der aktuellen Einstellung (30, 40 oder 50)
setting = 30

# Definieren einer Funktion, um die Temperatur vom Sensor zu lesen und auf dem OLED-Display anzuzeigen
def show_temperature():
    # Messen der Temperatur von allen Sensoren
    ds.convert_temp()
    # Lesen der Temperatur vom ersten Sensor in Grad Celsius
    temp = ds.read_temp(sensors[0])
    # Ausgeben der Temperatur auf der Konsole
    print('Temperatur:', temp)
    # Löschen des OLED-Displays
    oled.fill(0)
    # Schreiben der Temperatur und der aktuellen Einstellung auf das OLED-Display
    oled.text('Temperatur:', 0, 0)
    oled.text(str(temp) + ' C', 0, 10)
    oled.text('Einstellung:', 0, 20)
    oled.text(str(setting) + ' C', 0, 30)
    # Aktualisieren des OLED-Displays
    oled.show()
    # Rückgabe der Temperatur
    return temp

# Definieren einer Funktion, um das Relais basierend auf der Temperatur und der Einstellung zu steuern
def control_heater(temp):
    # Holen Sie sich den gewünschten Temperaturbereich für die aktuelle Einstellung
    lower, upper = temp_ranges[setting]
    # Wenn die Temperatur unter dem unteren Grenzwert liegt, schalten Sie das Relais ein
    if temp < lower:
        relay_pin.value(1)
        print('Heizung eingeschaltet')
    # Wenn die Temperatur über dem oberen Grenzwert liegt, schalten Sie das Relais aus
    elif temp > upper:
        relay_pin.value(0)
        print('Heizung ausgeschaltet')
    # Ansonsten lassen Sie das Relais unverändert
    else:
        print('Heizung unverändert')

# Definieren einer Funktion, um die Einstellung basierend auf einem Tastendruck zu ändern
def change_setting():
    global setting # Verwenden Sie die globale Variable setting
    # Erstellen Sie eine Liste der möglichen Einstellungen
    settings = [30, 40, 50]
    # Finden Sie den Index der aktuellen Einstellung in der Liste
    index = settings.index(setting)
    # Erhöhen Sie den Index um eins und wickeln Sie ihn um, wenn er das Ende der Liste erreicht
    index = (index + 1) % len(settings)
    # Setzen Sie die Einstellung auf den neuen Wert in der Liste
    setting = settings[index]
    # Ausgeben der neuen Einstellung auf der Konsole
    print('Neue Einstellung:', setting)

# Erstellen eines Pin-Objekts für einen Taster, der an Pin 16 angeschlossen ist und einen internen Pull-down-Widerstand verwendet
button = machine.Pin(16, machine.Pin.IN, machine.Pin.PULL_DOWN)
# Erstellen eines Interrupt-Handlers, der die Funktion change_setting aufruft, wenn der Taster gedrückt wird
button.irq(change_setting, trigger=machine.Pin.IRQ_RISING)

# Erstellen einer Endlosschleife, die die Temperatur anzeigt und die Heizung steuert
while True:
    # Rufen Sie die Funktion show_temperature auf und speichern Sie die zurückgegebene Temperatur
    temperature = show_temperature()
    # Rufen Sie die Funktion control_heater mit der gemessenen Temperatur auf
    control_heater(temperature)
    # Warten Sie eine Sekunde, bevor Sie die Schleife wiederholen
    time.sleep(1)
